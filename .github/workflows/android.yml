name: Android CI & GitHub Release

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:
  schedule:
    - cron: '0 8 * * *'

jobs:
  build-test-and-prepare-apk:
    runs-on: ubuntu-latest
    outputs:
      version_tag: ${{ steps.version.outputs.VERSION_TAG }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Generate local.properties
        run: |
          echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" >> local.properties
          echo "UTILITY_API_KEY=${{ secrets.UTILITY_API_KEY }}" >> local.properties
          echo "Generated local.properties"

      - name: Create Keystore Directory
        run: mkdir -p ~/.android

      - name: Decode Debug Keystore
        run: |
          echo "${{ secrets.DEBUG_KEYSTORE_BASE64 }}" | base64 --decode > ~/.android/debug.keystore
          echo "Custom debug.keystore decoded to ~/.android/debug.keystore"

      - name: Grant Gradle execution permissions
        run: chmod +x ./gradlew

      - name: Build Debug APK
        run: ./gradlew assembleDebug --stacktrace --info
        env:
          ANDROID_DEBUG_STORE_PASSWORD: ${{ secrets.DEBUG_KEYSTORE_PASSWORD }}
          ANDROID_DEBUG_KEY_ALIAS: ${{ secrets.DEBUG_KEY_ALIAS }}
          ANDROID_DEBUG_KEY_PASSWORD: ${{ secrets.DEBUG_KEY_PASSWORD }}

      - name: Run Unit Tests
        run: ./gradlew testDebugUnitTest --stacktrace --info

      - name: Set Version Tag (for main branch push)
        id: version
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          VERSION_TAG=$(date +'%Y.%m.%d.%H%M%S')
          echo "VERSION_TAG=${VERSION_TAG}" >> $GITHUB_OUTPUT
          echo "Generated version tag: ${VERSION_TAG}"

      - name: Upload Debug APK as Artifact (for PRs or general use)
        if: success() && (github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref != 'refs/heads/main'))
        uses: actions/upload-artifact@v4
        with:
          name: app-debug-apk
          path: app/build/outputs/apk/debug/app-debug.apk

      - name: Upload Debug APK for Release Job (on main branch push)
        if: success() && github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: apk-for-release
          path: app/build/outputs/apk/debug/app-debug.apk

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results
          path: app/build/test-results/testDebugUnitTest/

  create-github-release:
    needs: build-test-and-prepare-apk
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.build-test-and-prepare-apk.result == 'success'
    permissions:
      contents: write
    steps:
      - name: Download APK for Release
        uses: actions/download-artifact@v4
        with:
          name: apk-for-release
          path: artifacts/
      - name: Display structure of downloaded files
        run: ls -R artifacts/
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.build-test-and-prepare-apk.outputs.version_tag }}
          name: Release v${{ needs.build-test-and-prepare-apk.outputs.version_tag }}
          body: |
            Automated GitHub release (Debug APK signed with consistent key).
            Commit: ${{ github.sha }}
            Triggered by: ${{ github.actor }}
          files: artifacts/app-debug.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}